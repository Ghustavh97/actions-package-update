{"id":"ZCfc","dependencies":[{"name":"/actions-package-update/tsconfig.json","includedInParent":true,"mtime":1613629465000},{"name":"/actions-package-update/package.json","includedInParent":true,"mtime":1613629617605},{"name":"../package.json","loc":{"line":15,"column":47},"parent":"/actions-package-update/src/main.ts","resolved":"/actions-package-update/package.json"},{"name":"./body","loc":{"line":16,"column":23},"parent":"/actions-package-update/src/main.ts","resolved":"/actions-package-update/src/body.ts"},{"name":"./git","loc":{"line":17,"column":38},"parent":"/actions-package-update/src/main.ts","resolved":"/actions-package-update/src/git.ts"},{"name":"./promisify","loc":{"line":18,"column":28},"parent":"/actions-package-update/src/main.ts","resolved":"/actions-package-update/src/promisify.ts"}],"generated":{"js":"\"use strict\";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,\"__esModule\",{value:!0});const t=require(\"@octokit/rest\"),i=e(require(\"@pnpm/read-modules-dir\")),n=e(require(\"execa\")),a=e(require(\"git-url-parse\")),o=e(require(\"glob\")),r=e(require(\"moment\")),s=e(require(\"path\")),g=e(require(\"sha.js\")),c=require(\"util\"),l=e(require(\"../package.json\")),u=require(\"./body\"),d=e(require(\"./git\")),h=require(\"./promisify\"),f=(e,t)=>Object.fromEntries(Object.entries(e).map(([e,i])=>[e,t(e,i)]));class p{constructor(e){this.config=e,this.git=new d.default(e)}async run(){const e=r.default().format(\"YYYYMMDDhhmm\");this.config.logger.info(\"Start process.\");const{found:t,newBranch:i}=await this.makeBranch(e);if(t)return`Found existing branch ${t}`;const n=await this.upgrade(),a=await this.commit();await this.git.checkout(\"-\");const o=await h.readJson(s.default.join(this.config.get(\"workingdir\"),\"package.json\"));return 0<a.length?this.config.get(\"execute\")?await this.pullRequest(i,o,n,e):(this.config.logger.info(\"git push is skipped. Because EXECUTE environment variable is not true\"),this.config.logger.info([\"\",...await Promise.all(Object.entries(n).map(async([e,t],i)=>`${0===i?\"\":e}\\n${u.toTextTable(await h.readJson(s.default.join(e,\"package.json\")),t.oldone,t.newone)} `))].join(\"\\n\"))):this.config.logger.info(\"Did not find outdated dependencies.\"),this.config.get(\"keep\")||(this.config.logger.info(\"Delete working branch because KEEP environment variable is not true\"),await this.git.deleteBranch(i)),\"All done!!\"}async makeBranch(e){this.config.logger.debug(\"START makeBranch\");const t=await this.getFile(\"package.json\");if(!t)throw new Error(\"package.json not found\");const i=(new g.default.sha1).update(t.toString(),\"utf8\").digest(\"hex\"),n=`${this.config.get(\"git\").prefix}${e}/${i}`;await this.git.fetch(\"origin\"),this.config.logger.debug(\"listBranches\");const a=await this.git.listBranches();this.config.logger.trace(\"%o\",a);const o=a.find(e=>e.endsWith(i));return this.config.logger.debug(\"found branch is %s\",o),o||await this.git.checkoutWith(n),this.config.logger.debug(\"END   makeBranch\"),{found:o,newBranch:n}}async upgrade(){this.config.logger.debug(\"START upgrade\"),await this.install();const e=await this.collectPackage(),t=process.argv.slice(2),i=this.config.get(\"update\"),n=await this.runInWorkingDir(i,t);if(n.failed)throw this.config.logger.debug(\"FAILED upgrade\"),new Error(n.stderr);await this.install();const a=await this.collectPackage();if(this.config.logger.debug(\"END   upgrade\"),e.length!==a.length)throw new Error(\"received more package.jsons than previous\");return f(e,(e,t)=>({directoryName:e,oldone:t,newone:a[e]}))}async commit(){this.config.logger.debug(\"START commit\");const e=await this.git.status();if(0<e.length){this.config.logger.debug(\"files are changed\"),this.config.logger.trace(\"changed files are %o\",e);const t=this.config.get(\"git\").files.split(\" \"),i=e.filter(e=>t.includes(e.path)).map(e=>e.path);i.length>0?(this.config.logger.debug(\"files to add are %o\",i),await this.git.add(i)):await this.git.addAll(),await this.git.setup(this.config.get(\"git\").username,this.config.get(\"git\").useremail),await this.git.commit(this.config.get(\"git\").message)}return this.config.logger.debug(\"END   commit\"),e}async newGitHub(e,i){return new t.Octokit({auth:`token ${e.get(\"token\")}`,userAgent:`${l.default.name}/${l.default.version}`,baseUrl:\"github.com\"!==i.resource?`https://${i.resource}/api/v3`:void 0})}async pullRequest(e,t,i,n){this.config.logger.debug(\"START pullRequest\"),await this.git.push(\"origin\",e),this.config.logger.trace(i);const o=(await Promise.all(Object.entries(i).map(async([e,t],n)=>`${Object.entries(i).length>1?0===n?\"## root\":`## ${e}`:\"## Updating Dependencies\"}\\n${u.toMarkdown(await h.readJson(s.default.join(e,\"package.json\")),t.oldone,t.newone)}`))).join(\"\\n\"),r=await this.git.remoteurl(\"origin\"),g=a.default(r),c=await this.newGitHub(this.config,g),d=await c.repos.get({owner:g.owner,repo:g.name}),f={owner:g.owner,repo:g.name,base:d.data.default_branch,head:e,title:this.config.get(\"title\"),body:`${o}\\n\\nPowered by [${l.default.name}](${l.default.homepage})`};this.config.logger.debug(\"Pull Request create\"),this.config.logger.trace(f),await c.pulls.create(f),this.config.logger.debug(\"END   pullRequest\")}async install(){if(this.config.logger.debug(\"START install\"),await this.getFile(\"yarn.lock\"))return this.config.logger.debug(\"use yarn\"),void(await this.runInWorkingDir(\"yarn\",\"install\"));this.config.logger.debug(\"use npm\"),await this.runInWorkingDir(\"npm\",\"install\"),this.config.logger.debug(\"END   install\")}async getFile(e){const t=s.default.join(this.config.get(\"workingdir\"),e);return this.config.logger.debug(\"getFile %s\",t),h.readFile(t,{encoding:\"utf8\"}).catch(()=>void 0)}async runInWorkingDir(e,t,i){const a=\"string\"==typeof t?[t]:t;this.config.logger.debug(\"runInWorkingDir %s %o\",e,a);const o=n.default(e,a,{cwd:this.config.get(\"workingdir\"),...i});return this.config.logger.levelVal<30&&(o.stdout&&o.stdout.pipe(process.stdout),o.stderr&&o.stderr.pipe(process.stderr)),o}async collectPackage(){const e=this.config.get(\"workingdir\"),t=await h.readJson(s.default.join(e,\"./package.json\")),n=t.workspaces?[e,...await Promise.all(t.workspaces.map(t=>c.promisify(o.default)(s.default.join(e,t))))].flat():[e];return Object.fromEntries(await Promise.all(n.map(async t=>{this.config.logger.debug(\"START collectPackage\");const n=this.config.get(\"shadows\"),a=await h.readJson(s.default.join(t,\"./package.json\"));this.config.logger.trace(a);const o=(e,t)=>t&&t[e],r=n?()=>!0:([e,t])=>o(e,a.dependencies)||o(e,a.devDependencies)||o(e,a.optionalDependencies),g=s.default.join(e,\"node_modules\"),c=e!==t?s.default.join(t,\"node_modules\"):void 0,l=await i.default(g),u=c?await i.default(c):void 0;if(this.config.logger.trace(\"module directories are %o\",l),l){const e=await Promise.all(l.map(e=>h.readJson(`${g}/${e}/package.json`))),i=u?await Promise.all(u.map(e=>h.readJson(`${c}/${e}/package.json`))):[];this.config.logger.trace(\"packages %o\",e);const n=[...i,...e].map(e=>[e.name,e]).filter(r);return this.config.logger.debug(\"END   collectPackage\"),[t,new Map(n)]}return this.config.logger.debug(\"END   collectPackage\"),[t,new Map]})))}}exports.default=p;"},"sourceMaps":null,"error":null,"hash":"c9a079e32ca4f26db9868907360e384e","cacheData":{"env":{}}}